log (){
	date +"[%T] $*" | tee -a "${LOG_FILE}"
}
export -f log

bootstrap(){
	local BOOTSTRAP_CMD=debootstrap
	local BOOTSTRAP_ARGS=()

	BOOTSTRAP_ARGS+=(--arch arm64)
    BOOTSTRAP_ARGS+=(--variant=minbase)
	BOOTSTRAP_ARGS+=("$@")
	printf -v BOOTSTRAP_STR '%q ' "${BOOTSTRAP_ARGS[@]}"

	${BOOTSTRAP_CMD} $BOOTSTRAP_STR || true

	if [ -d "$2/debootstrap" ] && ! rmdir "$2/debootstrap"; then
		cp "$2/debootstrap/debootstrap.log" "${STAGE_WORK_DIR}"
		log "bootstrap failed: please check ${STAGE_WORK_DIR}/debootstrap.log"
		return 1
	fi
}
export -f bootstrap

copy_previous(){
	if [ ! -d "${PREV_ROOTFS_DIR}" ]; then
		echo "Previous stage rootfs not found"
		false
	fi
	mkdir -p "${ROOTFS_DIR}"
	rsync -aHAXx --exclude var/cache/apt/archives "${PREV_ROOTFS_DIR}/" "${ROOTFS_DIR}/"
}
export -f copy_previous

unmount(){
	if [ -z "$1" ]; then
		DIR=$PWD
	else
		DIR=$1
	fi

	for i in {1..6}; do
		if awk "\$2 ~ /^${DIR//\//\\/}/ {print \$2}" /etc/mtab | sort -r | xargs -r umount; then
			break
		elif [ "$i" -eq 6 ]; then
			log "Failed to unmount ${DIR}. Do not try to delete this directory while it contains mountpoints!"
			return 1
		fi
		log "Retrying ($i/5)..."
		sleep 1
	done
}
export -f unmount

unmount_image(){
	if command -v udevadm >/dev/null 2>&1; then
		udevadm settle 10
	else
		sleep 1
	fi
	LOOP_DEVICE=$(losetup -n -O NAME -j "$1")
	if [ -n "$LOOP_DEVICE" ]; then
		for part in "$LOOP_DEVICE"p*; do
			if DIR=$(findmnt -n -o target -S "$part"); then
				unmount "$DIR"
			fi
		done
		losetup -d "$LOOP_DEVICE"
	fi
}
export -f unmount_image

on_chroot() {
	if ! mount | grep -q "$(realpath "${ROOTFS_DIR}"/proc)"; then
		mount -t proc proc "${ROOTFS_DIR}/proc"
	fi

	if ! mount | grep -q "$(realpath "${ROOTFS_DIR}"/dev)"; then
		mount --bind /dev "${ROOTFS_DIR}/dev"
	fi
	
	if ! mount | grep -q "$(realpath "${ROOTFS_DIR}"/dev/pts)"; then
		mount --bind /dev/pts "${ROOTFS_DIR}/dev/pts"
	fi

	if ! mount | grep -q "$(realpath "${ROOTFS_DIR}"/sys)"; then
		mount --bind /sys "${ROOTFS_DIR}/sys"
	fi

	if ! mount | grep -q "$(realpath "${ROOTFS_DIR}"/run)"; then
		mount -t tmpfs  tmpfs "${ROOTFS_DIR}/run"
	fi

	if ! mount | grep -q "$(realpath "${ROOTFS_DIR}"/tmp)"; then
		mount -t tmpfs  tmpfs "${ROOTFS_DIR}/tmp"
	fi

	chroot "${ROOTFS_DIR}/" "$@"
}
export -f on_chroot
